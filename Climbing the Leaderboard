import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the climbingLeaderboard function below.
    // Alice is an array which is a list of integer used to insert into scores array and get the desired rank.
    //Output shows the different rank on inserting different values of integers.
    
    
    
    static int[] climbingLeaderboard(int[] scores, int[] alice) {

        
        Arrays.sort(scores);

            int rank[] = new int[scores[scores.length - 1] + 1];
            for(int j=0 ; j<rank.length ; j++){
                rank[j] = 0;
            }

            
            int count = 1;

            for(int i=scores.length - 1 ; i >= 0 ; i--){
                int element = scores[i];
                if(rank[element] == 0){
                    rank[element] = count;
                    count++;
                }
                

            }

            List<Integer> list = new ArrayList<>();

            if(scores.length == 1){
                for(int i = 0 ; i<alice.length ; i++){
                    if(alice[i] >= scores[0]){
                        list.add(1);
                    }else{
                        list.add(2);
                    }
                }
            }else{


            for(int i = 0 ; i<alice.length ; i++){
                for(int j = 0 ; j<scores.length - 1 ; j++){
                    if(alice[i] >= scores[scores.length - 1]){
                        list.add(rank[scores[scores.length - 1]]);
                        break;

                    }
                    else if(alice[i]>=scores[j] && alice[i] < scores[j+1]){
                            list.add(rank[scores[j]]);
                            break;
                    }
                    
                    else if(alice[i] < scores[0]){
                        list.add(rank[scores[0]] + 1);
                        break;
                    }
                    else if(alice[i] == scores[j]){
                        list.add(rank[scores[j]]);
                        break;
                    }
                }
            }

            }

           

            int[] output = new int[list.size()];
            for(int i = 0 ; i<list.size() ; i++){
                int out = list.get(i);
                output[i] = out;
            }

            return output;


    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int scoresCount = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] scores = new int[scoresCount];

        String[] scoresItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < scoresCount; i++) {
            int scoresItem = Integer.parseInt(scoresItems[i]);
            scores[i] = scoresItem;
        }

        int aliceCount = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] alice = new int[aliceCount];

        String[] aliceItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < aliceCount; i++) {
            int aliceItem = Integer.parseInt(aliceItems[i]);
            alice[i] = aliceItem;
        }

        int[] result = climbingLeaderboard(scores, alice);

        for (int i = 0; i < result.length; i++) {
            bufferedWriter.write(String.valueOf(result[i]));

            if (i != result.length - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
